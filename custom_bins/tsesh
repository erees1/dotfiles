#!/bin/bash

USAGE=$(cat <<-END
Usage: tsesh <PATH>

Tmux session switcher, if a PATH argument is provided will either switch to or 
start a new session named after the basename of that path and in that location.
If no PATH is provided a fzf window will be presented from common options.

OPTIONS:
    --popup [use if called from a tmux popup window, changes some fzf options]
END
)
POSITIONAL_ARGS=()
while (( "$#" )); do
    case "$1" in
        -h|--help)
            echo "$USAGE" && exit 1 ;;
        --popup)
            POPUP=true && shift ;;
        --full_screen)
            FULL_SCREEN=true && shift ;;
        --) # end argument parsing
            shift && break ;;
        -*|--*=) # unsupported flags
            echo "Error: Unsupported flag $1" >&2 && exit 1 ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters


# Selection using fzf ---
transform_name(){
    name="$1"
    sesh_name=$(basename "$name")
    if [[ $name == "/exp/$(whoami)" ]] ; then
        sesh_name="exp"
    elif [[ $name == *"/git/aladdin/"* ]] ; then
        sesh_name="aladdin-$sesh_name"
    fi
    echo "$sesh_name"
}

make_nice() {
    printf "\x1b[1mSession Directory Status\x1b[0m\n"  #Headings
    while IFS=$'\n' read -r line; do
        name="$(transform_name $line)"
        if tmux has-session -t="$name" 2> /dev/null ; then
            status="\x1b[32mrunning\x1b[0m"
        else
            status="create?"
        fi
        printf "\x1b[33m$name \x1b[34m$line\x1b[0m $status\n"
    done | sort -k3,3 -k1,1
}

find_directories(){
    echo "/exp/$(whoami)"
    echo "$HOME/tb"
    possible_options="$HOME/git"
    possible_options+=" $HOME/git/aladdin"
    find  $possible_options -mindepth 1 -maxdepth 1 -type d -not -path '*/.*';
}
fzf_bin="fzf"
fzf_args="--header-lines=1 --ansi"
if [[ $# -eq 1 ]]; then
    selected=$1
else
    if [[ ! -z $POPUP  && $TERM_PROGRAM == "tmux" ]] ; then
        fzf_bin="fzf-tmux -p"
    fi
    if [[ $FULL_SCREEN == "true" ]]; then
        fzf_args+=" --border=none --height=100%"
    fi
    selected=$(find_directories | make_nice | column -t -s' '| sed '1s/^/  /' | $fzf_bin $fzf_args )
    selected=$(echo $selected | awk '{ print $2 }')
fi

sesh_name=$(transform_name $selected)

if [[ -z $selected ]]; then
    exit 0
fi

# Session switching ---

# accept tsesh default
if [[ $sesh_name == "default" ]]; then
    was_default=true
    if [[ $LOC == "remote" ]]; then
        sesh_name="aladdin-WIP_feature"
        selected="$HOME/git/aladdin/WIP_feature"
        args="make shell 2> /dev/null"
    else
        sesh_name="local"
        selected="$HOME"
    fi
else
    was_default=false
fi

# Make shell if an aladdin worktree is selected
args=""
if [[ $selected == *"/git/aladdin/"* ]] ; then
    args="make shell 2> /dev/null"
fi

is_running=$(ps aux | grep '[t]mux new-session')
if tmux info &> /dev/null; then
    is_inside="true"
fi

# If tmux is not running at all
if [[ -z $TMUX ]] && [[ -z $is_running ]]; then
    tmux new-session -s $sesh_name -c $selected $args
    exit 0
fi

# If tmux is running but does not have a session with that name
# create new session but dont attach
if ! tmux has-session -t=$sesh_name 2> /dev/null; then
    tmux new-session -ds $sesh_name -c $selected $args
fi

# If tmux is running, has a session with that name but we are not currently attached
if [[ -z $is_inside ]]; then
    if [[ $was_default == "true" ]]; then
        tmux attach
    else
        tmux attach -t $sesh_name
    fi
fi

# If we are inside tmux and there is a session with that name
tmux switch-client -t $sesh_name
