#! /usr/bin/env python3

import requests
import os
from datetime import datetime
from pydantic import BaseModel
from typing import List, Optional
from rich.table import Table
from rich.console import Console
from rich.style import Style
from collections import defaultdict
from fire import Fire
from datetime import timedelta


class Project(BaseModel):
    self: str
    team_id: Optional[int]
    title: str
    title_chain: List[str]
    color: str
    productivity_score: float
    is_archived: bool
    parent: Optional[int]


class DataItem(BaseModel):
    duration: float
    project: Optional[Project] = None
    start_date: datetime
    end_date: datetime


def print_rich_table(data_items: List[DataItem]) -> None:
    table_data = defaultdict(lambda: defaultdict(lambda: (0, None)))
    time_periods = set()

    # Sum durations for each project-timeperiod combination
    for item in data_items:
        project_title = item.project.title if item.project else "Uncategorized"
        project_color = item.project.color if item.project else "#FFFFFFFF"
        if item.start_date == item.end_date:
            time_period = (item.start_date, item.start_date.strftime("%a %d %b"))
        else:
            time_period = (
                item.start_date,
                f'{item.start_date.strftime("%a %d %b")} - {item.end_date.strftime("%a %d %b")}',
            )

        table_data[project_title][time_period] = (
            table_data[project_title][time_period][0] + (item.duration / 3600),
            project_color,
        )  # Convert to hours and save color
        time_periods.add(time_period)

    time_periods_sorted = sorted(list(time_periods), key=lambda x: x[0])

    rows = []
    for project, durations in table_data.items():
        row = [project]
        prev_duration = None
        for tp in time_periods_sorted:
            curr_duration, project_color = durations[tp]
            hours, remainder = divmod(curr_duration, 1)
            minutes = remainder * 60
            duration_str = f"{int(hours)}:{int(minutes):02d}"

            if prev_duration is not None:
                change = ((curr_duration - prev_duration) / prev_duration) * 100 if prev_duration != 0 else 0
                change_str = f"({change:+.0f}%)"
                combined_str = f"{duration_str} {change_str}"
                row.append(combined_str)
            else:
                row.append(duration_str)
            prev_duration = curr_duration

        color_row = [project_color] * len(row)
        rows.append((row, color_row))

    # Print the table using Rich
    console = Console()
    table = Table(show_header=True, header_style="bold blue")
    table.add_column("Project")
    for tp in time_periods_sorted:
        table.add_column(tp[1], justify="right")

    for row, color_row in rows:
        color = color_row[0]
        styled_row = Style(color=f"{color[:-2]}") if color else None
        table.add_row(*row, style=styled_row)
    console.print(table)


def get_data_for_period(
    start_date: datetime,
    end_date: datetime,
) -> List[DataItem]:
    url = "https://web.timingapp.com/api/v1/report"
    params = {
        "include_app_usage": "1",
        "include_team_members": "0",
        "team_members[]": "/users/1",
        "include_child_projects": "1",
        "columns[]": ["project"],
        "project_grouping_level": "0",
        "include_project_data": "1",
        "timespan_grouping_mode": "day",
        "sort[]": "-duration",
        "start_date_min": start_date.strftime("%Y-%m-%d"),
        "start_date_max": end_date.strftime("%Y-%m-%d"),
    }
    headers = {
        "Authorization": f'Bearer {os.environ["TIMING_API_KEY"]}',
        "Content-Type": "application/json",
        "Accept": "application/json",
    }

    response = requests.request("GET", url, headers=headers, params=params)
    items = [DataItem(**i, start_date=start_date, end_date=end_date) for i in response.json()["data"]]
    return items


def generate_date_ranges(n_periods: int, period_type: str, initial_date: datetime) -> list[tuple[datetime, datetime]]:
    delta = None
    if period_type == "day":
        delta = timedelta(days=1)
    elif period_type == "week":
        delta = timedelta(weeks=1)
    elif period_type == "month":
        delta = timedelta(days=30)  # Approximation for a month

    date_ranges = []
    for i in range(n_periods):
        end_date = initial_date - (i * delta)
        start_date = end_date
        start_date = end_date - delta + timedelta(days=1)
        date_ranges.append((start_date, end_date))

    return date_ranges


def main(period_type: str = "week", n_periods: int = None):
    today = datetime.today()
    all_data_items = []

    if period_type == "day":
        n_periods = 7 if n_periods is None else n_periods
    n_periods = 4 if n_periods is None else n_periods

    date_ranges = generate_date_ranges(n_periods, period_type, today)

    for start, end in date_ranges:
        # id is a string representation of the range
        all_data_items.extend(get_data_for_period(start, end))

    print_rich_table(all_data_items)


if __name__ == "__main__":
    Fire(main)
